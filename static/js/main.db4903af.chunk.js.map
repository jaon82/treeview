{"version":3,"sources":["hooks/tree.tsx","components/TreeView/styles.ts","components/TreeView/index.tsx","App.tsx","reportWebVitals.ts","hooks/index.tsx","index.tsx"],"names":["TreeContext","createContext","TreeProvider","children","useState","tree","setTree","parseTreeData","useCallback","data","arrayData","Object","keys","k","showChildren","checked","useEffect","storageTree","localStorage","getItem","JSON","parse","updateShowChildren","id","node","push","toogleShowChildren","updatedTree","setItem","stringify","updateChecked","toogleCheckedNode","toogleChecked","treeAux","Provider","value","useTree","context","useContext","Error","Container","styled","ul","Item","li","props","level","css","TreeView","handleToogleShowChildren","checkNode","map","type","onChange","onClick","name","length","size","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db4903af.chunk.js","sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\n\nimport data from '../data.json';\n\ninterface TreeNode {\n    id: string;\n    name: string;\n    children: TreeNode[],\n    level: number,\n    showChildren: boolean,\n    checked: boolean\n}\n\ninterface TreeContextData {\n    tree: TreeNode[];\n    toogleShowChildren(id: string): void;\n    toogleChecked(id: string): void;\n}\n\nconst TreeContext = createContext<TreeContextData | null>(null);\n\n\nexport const TreeProvider: React.FC = ({ children }) => {\n    const [tree, setTree] = useState<TreeNode[]>([]);\n\n    const parseTreeData = useCallback((data: any) => {\n        let arrayData: any = [];\n        for (let k of Object.keys(data)) {\n            arrayData[k] = data[k];\n            arrayData[k].children = parseTreeData(arrayData[k].children);\n            arrayData[k].showChildren = false;\n            arrayData[k].checked = false;\n        }\n        return arrayData;\n    }, []);\n\n    useEffect(() => {\n        const storageTree = localStorage.getItem(\n            '@HiPlatform:tree',\n        );\n        if (storageTree) {\n            setTree(JSON.parse(storageTree));\n        } else {\n            setTree(parseTreeData(data));\n        }\n    }, [parseTreeData]);\n\n    const updateShowChildren = useCallback((data: TreeNode[], id: string) => {\n        let arrayData = [];\n        for (let node of data) {\n            if (node.id === id) {\n                node.showChildren = !node.showChildren;\n            }\n            node.children = updateShowChildren(node.children, id);\n            arrayData.push(node);\n        }\n        return arrayData;\n    }, []);\n\n    const toogleShowChildren = useCallback((id: string) => {\n        const updatedTree = updateShowChildren(tree, id);\n        setTree(updatedTree);\n        localStorage.setItem(\n            '@HiPlatform:tree',\n            JSON.stringify(updatedTree),\n        );\n    }, [tree, updateShowChildren]);\n\n\n    const updateChecked = useCallback((data: TreeNode[], checked: boolean) => {\n        for (let node of data) {\n            node.checked = checked;\n            node.children = updateChecked(node.children, checked);\n        }\n        return data;\n    }, []);\n\n    const toogleCheckedNode = useCallback((data: TreeNode[], id: string) => {\n        for (let node of data) {\n            if (node.id === id) {\n                node.checked = !node.checked;\n                node.children = updateChecked(node.children, node.checked);\n            }\n            node.children = toogleCheckedNode(node.children, id);\n        }\n        return data;\n    }, [updateChecked]);\n\n    const toogleChecked = useCallback((id: string) => {\n        const treeAux = [...tree];\n        const updatedTree = toogleCheckedNode(treeAux, id);\n        setTree(updatedTree);\n        localStorage.setItem(\n            '@HiPlatform:tree',\n            JSON.stringify(updatedTree),\n        );\n    }, [toogleCheckedNode, tree]);\n\n    return (\n        <TreeContext.Provider value={{ tree, toogleShowChildren, toogleChecked }}>\n            {children}\n        </TreeContext.Provider>\n    );\n};\n\nexport function useTree(): TreeContextData {\n    const context = useContext(TreeContext);\n\n    if (!context) {\n        throw new Error('useTree must be used within an TreeProvider');\n    }\n\n    return context;\n}\n","import styled, { css } from 'styled-components';\n\ninterface ItemProps {\n    level: number;\n}\n\nexport const Container = styled.ul`\n    max-width: 700px;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li<ItemProps>`\n    div{\n        display: flex;\n        align-items: center;\n        justify-content: space-between;   \n        cursor: pointer;\n        padding: 0 16px;\n\n        &:hover{\n            background-color: #ddd;\n        }\n        \n        ${props => props.level > 0 && css`\n            padding-left: ${16 + props.level * 16}px;\n        `}\n\n        input{\n            width: 20px;\n            height: 20px;\n            cursor: pointer;\n        }\n\n        h4{\n            flex: 1;\n            user-select: none;\n            margin: 5px 0 5px 16px;\n            padding: 20px 0;\n        }\n    }\n`;","import React, { useCallback } from 'react';\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi';\nimport { useTree } from '../../hooks/tree';\n\nimport { Container, Item } from './styles';\n\ninterface TreeNode {\n    id: string;\n    name: string;\n    children: TreeNode[],\n    level: number,\n    showChildren: boolean,\n    checked: boolean\n}\n\ninterface TreeProps {\n    tree: TreeNode[];\n}\n\nconst TreeView: React.FC<TreeProps> = ({ tree }) => {\n    const { toogleShowChildren, toogleChecked } = useTree();\n\n    const handleToogleShowChildren = useCallback((id: string) => {\n        toogleShowChildren(id);\n    }, [toogleShowChildren]);\n\n    const checkNode = useCallback((id: string) => {\n        toogleChecked(id);\n    }, [toogleChecked]);\n\n    return (\n        <Container>\n            {\n                tree.map((node) => (\n                    <Item key={node.id} level={node.level}>\n                        <div>\n                            <input type=\"checkbox\" onChange={() => checkNode(node.id)} checked={node.checked} />\n                            <h4 onClick={() => checkNode(node.id)}>{node.name}</h4>\n                            {node.children.length > 0 &&\n                                (\n                                    node.showChildren ?\n                                        <FiChevronUp size={30} onClick={() => handleToogleShowChildren(node.id)} color=\"#007bff\" />\n                                        : <FiChevronDown size={30} onClick={() => handleToogleShowChildren(node.id)} />\n                                )\n                            }\n                        </div>\n                        {node.children.length > 0 && node.showChildren &&\n                            <TreeView tree={node.children} />\n                        }\n                    </Item>\n                ))\n            }\n        </Container>\n    );\n}\n\nexport default TreeView;","import React from 'react';\nimport './App.css';\nimport { useTree } from './hooks/tree';\n\nimport TreeView from './components/TreeView'\n\nfunction App() {\n  const { tree } = useTree();\n\n  return (\n    <TreeView tree={tree} />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport { TreeProvider } from './tree';\n\nconst AppProvider: React.FC = ({ children }) => {\n    return (\n        <TreeProvider>\n            {children}\n        </TreeProvider>\n    );\n};\n\nexport default AppProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppProvider from './hooks';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}